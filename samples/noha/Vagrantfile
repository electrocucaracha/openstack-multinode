# -*- mode: ruby -*-
# vi: set ft=ruby :
# SPDX-license-identifier: Apache-2.0
##############################################################################
# Copyright (c) 2020
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

require 'yaml'

vagrant_boxes = YAML.load_file(File.dirname(__FILE__) + '/../../distros_supported.yml')

# Raspberry Pi 4 - 4 GB
compute_nodes = [
  { :hostname => "compute01", :ip => "10.10.13.9" },
  { :hostname => "compute02", :ip => "10.10.13.10" }
]

$no_proxy = ENV['NO_PROXY'] || ENV['no_proxy'] || "127.0.0.1,localhost"
# NOTE: This range is based on vagrant-libvirt network definition CIDR 192.168.121.0/24
(1..254).each do |i|
  $no_proxy += ",192.168.121.#{i}"
end
compute_nodes.each do |i|
  $no_proxy += ",#{i[:ip]}"
end
$no_proxy += ",10.10.13.8"
$socks_proxy = ENV['socks_proxy'] || ENV['SOCKS_PROXY'] || ""

Vagrant.configure("2") do |config|
  config.vm.provider :libvirt
  config.vm.provider :virtualbox

  config.vm.synced_folder '../../', '/vagrant'
  config.vm.box =  vagrant_boxes["ubuntu"]["bionic"]["name"]
  config.vm.box_version = vagrant_boxes["ubuntu"]["bionic"]["version"]
  config.ssh.insert_key = false

  config.vm.provider :libvirt do |v, override|
    v.cpu_mode = 'host-passthrough'
    v.random_hostname = true
    v.management_network_address = "192.168.121.0/24" # Provides Internet access for all nodes and is used for administration to install software packages
    v.management_network_mode = "nat" # NATed forwarding typically to reach networks outside of hypervisor
    v.cpu_mode = 'host-passthrough'
    v.disk_device = 'sda'
    v.disk_bus = 'sata'
  end
  end
  config.vm.provision 'shell', inline: <<-SHELL
    mkdir -p /root/.ssh
    cat /vagrant/insecure_keys/key.pub | tee /root/.ssh/authorized_keys
    chmod 700 ~/.ssh
    chmod 600 ~/.ssh/authorized_keys
    sed -i '/^PermitRootLogin no/d' /etc/ssh/sshd_config
  SHELL

  compute_nodes.each do |compute_node|
    config.vm.define "#{compute_node[:hostname]}" do |nodeconfig|
      nodeconfig.vm.hostname = compute_node[:hostname]
      nodeconfig.vm.network :private_network, :ip => compute_node[:ip], :type => :static,
        libvirt__network_name: "tunnel-net"

      [:virtualbox, :libvirt].each do |provider|
        config.vm.provider provider do |p, override|
          p.cpus = 4
          p.memory = 4096
        end
      end

      config.vm.provider 'virtualbox' do |v, override|
        v.customize ["modifyvm", :id, "--nested-hw-virt","on"]
      end
      nodeconfig.vm.disk :disk, name: "cinder", size: "50GB"

      nodeconfig.vm.provider :libvirt do |v, override|
        v.nested = true
        v.storage :file, :bus => 'sata', :device => 'sdb', :size => 50 # Cinder volume
      end
      nodeconfig.vm.provision 'shell', privileged: false do |sh|
        sh.inline = <<-SHELL
          cd /vagrant
          ./node.sh -c /dev/sdb | tee ~/node_$(hostname).log
        SHELL
      end
    end
  end

  config.vm.define "controller01", primary: true, autostart: false do |controller01|
    controller01.vm.hostname = "controller01"
    config.vm.provision 'shell', privileged: false, inline: <<-SHELL
      cd /vagrant
      sudo mkdir -p /root/.ssh/
      sudo cp insecure_keys/key /root/.ssh/id_rsa
      cp insecure_keys/key ~/.ssh/id_rsa
      cp insecure_keys/key.pub ~/.ssh/id_rsa.pub
      sudo chmod 400 /root/.ssh/id_rsa
      chown "$USER" ~/.ssh/id_rsa
      chmod 400 ~/.ssh/id_rsa

      source /etc/os-release || source /usr/lib/os-release
      case ${ID,,} in
          ubuntu|debian)
              sudo apt-get update
              sudo apt-get install -y -qq -o=Dpkg::Use-Pty=0 curl
          ;;
      esac
    SHELL
    controller01.vm.provision 'shell', privileged: false do |sh|
      sh.env = {
        'SOCKS_PROXY': "#{$socks_proxy}",
        'OS_ENABLE_LOCAL_REGISTRY': "true",
        'OS_INVENTORY_FILE': "./samples/noha/hosts.ini",
        'OS_KOLLA_NEUTRON_EXTERNAL_INTERFACE': "eth1",
        'OS_FOLDER': "/vagrant/"
      }
      sh.inline = <<-SHELL
        cd /vagrant
        ./node.sh -v sda=/var/lib/docker/ -c /dev/sdb | tee ~/node_controller01.log
        ./install.sh | tee ~/install_controller01.log
      SHELL
    end
    # Intel's NUC BXNUC10I7FNHAA1
    [:virtualbox, :libvirt].each do |provider|
      config.vm.provider provider do |p, override|
        p.cpus = 12 # sockets * cores * threads
        p.memory = 16384 # 2 x 8GB DDR4-2666
      end
    end

    $volume_file = "controller01-sda.vdi"
    $cinder_file = "controller01-sdb.vdi"
    controller01.vm.provider 'virtualbox' do |v, override|
      unless File.exist?($volume_file)
        v.customize ['createmedium', 'disk', '--filename', $volume_file, '--size', (50 * 1024)]
      end
      unless File.exist?($cinder_file)
        v.customize ['createmedium', 'disk', '--filename', $cinder_file, '--size', (100 * 1024)]
      end
      v.customize ['storageattach', :id, '--storagectl', 'IDE Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', $volume_file]
      v.customize ['storageattach', :id, '--storagectl', 'IDE Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', $cinder_file]
    end
    controller01.vm.provider :libvirt do |v, override|
      v.storage :file, :bus => 'sata', :device => 'sda', :size => 50
      v.storage :file, :bus => 'sata', :device => 'sdb', :size => 100
      v.cputopology :sockets => 1, :cores => 6, :threads => 2 # Intel Core i7-10710U Processor
    end
  end

  if ENV['http_proxy'] != nil and ENV['https_proxy'] != nil
    if Vagrant.has_plugin?('vagrant-proxyconf')
      config.proxy.http     = ENV['http_proxy'] || ENV['HTTP_PROXY'] || ""
      config.proxy.https    = ENV['https_proxy'] || ENV['HTTPS_PROXY'] || ""
      config.proxy.no_proxy = $no_proxy
      config.proxy.enabled = { docker: false }
    end
  end
end
