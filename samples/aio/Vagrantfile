# frozen_string_literal: true

# -*- mode: ruby -*-
# vi: set ft=ruby :
# SPDX-license-identifier: Apache-2.0
##############################################################################
# Copyright (c) 2020
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

require "yaml"

vagrant_boxes = YAML.load_file("#{File.dirname(__FILE__)}/../../distros_supported.yml")

no_proxy = ENV["NO_PROXY"] || ENV["no_proxy"] || "127.0.0.1,localhost"
(1..254).each do |i|
  no_proxy += ",10.0.2.#{i}"
end
socks_proxy = ENV["socks_proxy"] || ENV["SOCKS_PROXY"] || ""
os_distro = ENV["OS_DISTRO"] || "centos"
box = vagrant_boxes[os_distro][vagrant_boxes[os_distro].keys.first]
enable_weave_scope = ENV["ENABLE_WEAVE_SCOPE"]
run_init = ENV["OS_KOLLA_RUN_INIT"]
enable_magnum = ENV["OS_KOLLA_ENABLE_MAGNUM"] || "no"

Vagrant.configure("2") do |config|
  config.vm.provider :libvirt
  config.vm.provider :virtualbox

  config.vm.synced_folder "../../", "/vagrant"
  config.vm.box = box["name"]
  config.vm.box_version = box["version"]
  config.vm.box_check_update = false
  config.ssh.insert_key = false
  config.vm.hostname = "aio"

  # SSH Keys configuration
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    sudo sed -i '/^PermitRootLogin no/d' /etc/ssh/sshd_config
    rm -f ~/.ssh/id_rsa*
    sudo mkdir -p /root/.ssh/
    echo -e "\n\n\n" | ssh-keygen -t rsa -N ""
    if [ "$EUID" -ne "0" ]; then
        # Attempt to copy file when non root else cmd fails with 'same file' message
        sudo cp ~/.ssh/id_rsa /root/.ssh/id_rsa
    fi
    < ~/.ssh/id_rsa.pub tee --append  ~/.ssh/authorized_keys | sudo tee --append /root/.ssh/authorized_keys
    chmod og-wx ~/.ssh/authorized_keys
  SHELL

  # Configure single NIC limitation
  config.vm.provision "shell", privileged: false, inline: <<~SHELL
    set -o xtrace

    sudo ip link add veth0 type veth peer name veth1
    source /etc/os-release || source /usr/lib/os-release
    case ${ID,,} in
        ubuntu|debian)
            sudo ip link set dev veth0 up
            if ! command -v brctl; then
                sudo apt-get update ||:
                sudo apt-get install -y -qq -o=Dpkg::Use-Pty=0 --reinstall --no-install-recommends bridge-utils
            fi
            sudo brctl addbr uplinkbridge
            sudo brctl addif uplinkbridge veth0
            sudo ip link set uplinkbridge up
        ;;
        rhel|centos|fedora)
            if command -v nmcli; then
                sudo nmcli c add type bridge ifname uplinkbridge
                sudo nmcli c add type ethernet slave-type bridge con-name uplinkbridge ifname veth0 master uplinkbridge
                sudo nmcli c add type ethernet ifname veth0 con-name uplinkbridge ip4 10.10.13.7/24
                sudo nmcli c show
                sudo nmcli c up uplinkbridge
            fi
        ;;
    esac
    sudo ip addr add 10.10.13.7/24 dev veth0
    sudo ip route show

    sudo mkdir -p /etc/rc.d/
    sudo tee /etc/rc.d/rc.local << EOF
    #!/bin/bash
    sudo ip link add veth0 type veth peer name veth1
    sudo ip addr add 10.10.13.7/24 dev veth0
    EOF
    sudo chmod +x /etc/rc.d/rc.local
  SHELL

  # Ensure Permissive SELinux policy
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    if command -v sestatus; then
        sudo setenforce Permissive
        sudo sed -i "s/^SELINUX=.*/SELINUX=permissive/g" /etc/selinux/config
    fi
  SHELL

  config.vm.provision "shell", privileged: false do |sh|
    sh.env = {
      SOCKS_PROXY: socks_proxy.to_s,
      OS_FOLDER: "/vagrant/",
      OS_KOLLA_DEPLOY_PROFILE: "minimal",
      ENABLE_WEAVE_SCOPE: enable_weave_scope.to_s,
      OS_KOLLA_RUN_INIT: run_init.to_s,
      OS_KOLLA_NEUTRON_PLUGIN_AGENT: "linuxbridge",
      OS_KOLLA_BASE_DISTRO: os_distro.to_s,
      OPENSTACK_NODE_ROLES: "compute",
      OS_KOLLA_ENABLE_MAGNUM: enable_magnum.to_s,
      EXT_NET_RANGE: "start=10.0.2.20,end=10.0.2.100",
      EXT_NET_CIDR: "10.0.2.0/24"
    }
    sh.inline = <<~SHELL
      set -o errexit
      set -o xtrace

      export EXT_NET_GATEWAY=$(ip r | grep "^default" | awk 'NR==1{print $3}')

      cd /vagrant
      echo "127.0.0.1 localhost" | sudo tee /etc/hosts

      ./node.sh -v sdb=/var/lib/docker/ -c /dev/sdc | tee ~/node_aio.log
      ./install.sh | tee ~/install_aio.log

      if [ "${ENABLE_WEAVE_SCOPE:-false}" == "true" ]; then
          sudo curl -L git.io/scope -o /usr/local/bin/scope
          sudo chmod a+x /usr/local/bin/scope
          newgrp docker <<EONG
      scope launch
      EONG
      fi
    SHELL
  end

  # Intel's NUC BXNUC10i5FNH1
  %i[virtualbox libvirt].each do |provider|
    config.vm.provider provider do |p|
      p.cpus = ENV["CPUS"] || 8 # sockets * cores * threads
      p.memory = ENV["MEMORY"] || (8 * 2 * 1024) # 2 x 8GB DDR4-2666
    end
  end

  config.vm.provider "virtualbox" do |v, _override|
    v.gui = false
    v.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
    v.customize ["modifyvm", :id, "--nictype1", "virtio", "--cableconnected1", "on"]
    # https://bugs.launchpad.net/cloud-images/+bug/1829625/comments/2
    v.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
    v.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
    # Enable nested paging for memory management in hardware
    v.customize ["modifyvm", :id, "--nestedpaging", "on"]
    # Use large pages to reduce Translation Lookaside Buffers usage
    v.customize ["modifyvm", :id, "--largepages", "on"]
    # Use virtual processor identifiers  to accelerate context switching
    v.customize ["modifyvm", :id, "--vtxvpid", "on"]
  end
  config.vm.disk :disk, name: "docker", size: "50GB"
  config.vm.disk :disk, name: "cinder", size: "100GB"

  config.vm.provider :libvirt do |v, _override|
    _override.vm.synced_folder "../../", "/vagrant", type: "nfs"
    v.disk_bus = "sata"
    v.cputopology sockets: ENV["SOCKETS"] || 1, cores: ENV["CORES"] || 4, threads: ENV["THREADS"] || 2 # Intel Core i5-10210U Processor
    v.cpu_mode = "host-passthrough"
    v.random_hostname = true
    v.nested = true
    v.management_network_address = "10.0.2.0/24"
    v.management_network_name = "administration" # Administration - Provides Internet access for all nodes and is used for administration to install software packages
    v.storage :file, bus: "sata", size: 50 # ~30 GB Kolla Docker images
    v.storage :file, bus: "sata", size: 100 # Cinder volume
  end

  if !ENV["http_proxy"].nil? && !ENV["https_proxy"].nil? && Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.http = ENV["http_proxy"] || ENV["HTTP_PROXY"] || ""
    config.proxy.https    = ENV["https_proxy"] || ENV["HTTPS_PROXY"] || ""
    config.proxy.no_proxy = no_proxy
    config.proxy.enabled = { docker: false }
  end
  config.vm.network :forwarded_port, guest: 80, host: 8080
  config.vm.network :forwarded_port, guest: 6080, host: 6080
end
