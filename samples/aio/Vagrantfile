# -*- mode: ruby -*-
# vi: set ft=ruby :
# SPDX-license-identifier: Apache-2.0
##############################################################################
# Copyright (c) 2020
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

require 'yaml'

vagrant_boxes = YAML.load_file(File.dirname(__FILE__) + '/../../distros_supported.yml')

$no_proxy = ENV['NO_PROXY'] || ENV['no_proxy'] || "127.0.0.1,localhost"
# NOTE: This range is based on vagrant-libvirt network definition CIDR 192.168.121.0/24
(1..254).each do |i|
  $no_proxy += ",192.168.121.#{i}"
end
$no_proxy += ",10.0.2.15,10.10.13.7"
$socks_proxy = ENV['socks_proxy'] || ENV['SOCKS_PROXY'] || ""
$box=vagrant_boxes["centos"][8]

Vagrant.configure("2") do |config|
  config.vm.provider :libvirt
  config.vm.provider :virtualbox

  config.vm.synced_folder '../../', '/vagrant'
  config.vm.box =  $box["name"]
  config.vm.box_version = $box["version"]
  config.vm.box_check_update = false
  config.ssh.insert_key = false
  config.vm.hostname = "aio"

  # SSH Keys configuration
  config.vm.provision 'shell', privileged: false, inline: <<-SHELL
    sudo sed -i '/^PermitRootLogin no/d' /etc/ssh/sshd_config
    rm -f ~/.ssh/id_rsa*
    sudo mkdir -p /root/.ssh/
    echo -e "\n\n\n" | ssh-keygen -t rsa -N ""
    if [ "$EUID" -ne "0" ]; then
        # Attempt to copy file when non root else cmd fails with 'same file' message
        sudo cp ~/.ssh/id_rsa /root/.ssh/id_rsa
    fi
    < ~/.ssh/id_rsa.pub tee --append  ~/.ssh/authorized_keys | sudo tee --append /root/.ssh/authorized_keys
    chmod og-wx ~/.ssh/authorized_keys
  SHELL
  # Configure single NIC limitation
  config.vm.provision 'shell', privileged: false, inline: <<-SHELL
    set -o xtrace

    sudo ip link add veth0 type veth peer name veth1
    sudo nmcli c add type bridge ifname uplinkbridge
    sudo nmcli c add type ethernet slave-type bridge con-name uplinkbridge ifname veth0 master uplinkbridge
    sudo nmcli c add type ethernet ifname veth0 con-name uplinkbridge ip4 10.10.13.7/24
    sudo nmcli c up uplinkbridge
    sudo ip addr add 10.10.13.7/24 dev veth0
  SHELL
  # Ensure Permissive SELinux policy
  config.vm.provision 'shell', privileged: false, inline: <<-SHELL
    if command -v sestatus; then
        sudo setenforce Permissive
        sudo sed -i "s/^SELINUX=.*/SELINUX=permissive/g" /etc/selinux/config
    fi
  SHELL
  config.vm.provision 'shell', privileged: false do |sh|
    sh.env = {
      'SOCKS_PROXY': "#{$socks_proxy}",
      'OS_FOLDER': "/vagrant/",
    }
    sh.inline = <<-SHELL
      set -o errexit

      cd /vagrant
      echo "127.0.0.1 localhost" | sudo tee /etc/hosts

      ./node.sh -v sdb=/var/lib/docker/ -c /dev/sdc | tee ~/node_aio.log
      ./install.sh | tee ~/install_aio.log

      sudo curl -L git.io/scope -o /usr/local/bin/scope
      sudo chmod a+x /usr/local/bin/scope
      newgrp docker <<EONG
      scope launch
EONG
    SHELL
  end

  # Intel's NUC BXNUC10I7FNHAA1
  [:virtualbox, :libvirt].each do |provider|
  config.vm.provider provider do |p|
      p.cpus = ENV["CPUS"] || 12  # sockets * cores * threads
      p.memory = ENV["MEMORY"] || 16384  # 2 x 8GB DDR4-2666
    end
  end

  $volume_file = "aio-sdb.vdi"
  $cinder_file = "aio-sdc.vdi"
  config.vm.provider 'virtualbox' do |v, override|
    v.gui = false
    v.customize ["modifyvm", :id, "--nested-hw-virt","on"]
    unless File.exist?($volume_file)
      v.customize ['createmedium', 'disk', '--filename', $volume_file, '--size', (50 * 1024) ]
    end
    unless File.exist?($cinder_file)
      v.customize ['createmedium', 'disk', '--filename', $cinder_file, '--size', (100 * 1024)]
    end
    v.customize ['storageattach', :id, '--storagectl', $box["vb_controller"], '--port', 1, '--device', 0, '--type', 'hdd', '--medium', $volume_file]
    v.customize ['storageattach', :id, '--storagectl', $box["vb_controller"], '--port', 1, '--device', 1, '--type', 'hdd', '--medium', $cinder_file]
  end

  config.vm.provider :libvirt do |v, override|
    v.disk_bus = "sata"
    v.cputopology :sockets => 1, :cores => 6, :threads => 2 # Intel Core i7-10710U Processor
    v.cpu_mode = 'host-passthrough'
    v.random_hostname = true
    v.nested = true
    v.management_network_address = "192.168.121.0/24"
    v.storage :file, :bus => 'sata', :size => 50 # ~30 GB Kolla Docker images
    v.storage :file, :bus => 'sata', :size => 100 # Cinder volume
  end

  if ENV['http_proxy'] != nil and ENV['https_proxy'] != nil
    if Vagrant.has_plugin?('vagrant-proxyconf')
      config.proxy.http     = ENV['http_proxy'] || ENV['HTTP_PROXY'] || ""
      config.proxy.https    = ENV['https_proxy'] || ENV['HTTPS_PROXY'] || ""
      config.proxy.no_proxy = $no_proxy
      config.proxy.enabled = { docker: false }
    end
  end
end
